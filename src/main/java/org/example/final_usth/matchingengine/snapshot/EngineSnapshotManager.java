package org.example.final_usth.matchingengine.snapshot;

import com.alibaba.fastjson.JSON;

import com.mongodb.ClientSessionOptions;
import com.mongodb.client.ClientSession;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.*;
import lombok.extern.slf4j.Slf4j;
import org.bson.conversions.Bson;
import org.example.final_usth.enums.OrderStatus;
import org.example.final_usth.matchingengine.entity.Account;
import org.example.final_usth.matchingengine.entity.Order;
import org.example.final_usth.matchingengine.entity.Product;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.function.Consumer;

// Ch·ª©c nƒÉng ch√≠nh: l∆∞u v√† kh√¥i ph·ª•c tr·∫°ng th√°i engine (EngineState, Accounts, Orders, Products)
// M·ª•c ƒë√≠ch: khi restart engine, c√≥ th·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω m√† kh√¥ng m·∫•t d·ªØ li·ªáu ho·∫∑c x·ª≠ l√Ω tr√πng l·∫∑p

@Slf4j
@Component
public class EngineSnapshotManager {
    private final MongoCollection<EngineState> engineStateCollection;
    private final MongoCollection<Account> accountCollection;
    private final MongoCollection<Order> orderCollection;
    private final MongoCollection<Product> productCollection; // (BTC/USDT,‚Ä¶)
    private final MongoClient mongoClient;

    public EngineSnapshotManager(MongoClient mongoClient, MongoDatabase database) {
        this.mongoClient = mongoClient;
        this.engineStateCollection = database.getCollection("snapshot_engine", EngineState.class);
        this.accountCollection = database.getCollection("snapshot_account", Account.class);
        this.orderCollection = database.getCollection("snapshot_order", Order.class);
        this.orderCollection.createIndex(Indexes.descending("product_id", "sequence"), new IndexOptions().unique(true));
        this.productCollection = database.getCollection("snapshot_product", Product.class);
    }

    // Ch·∫°y m·ªôt ƒëo·∫°n code trong MongoDB session (h·ªó tr·ª£ transaction / snapshot isolation)
    public void runInSession(Consumer<ClientSession> consumer) {
        try (ClientSession session = mongoClient.startSession(ClientSessionOptions.builder().snapshot(true).build())) {
            consumer.accept(session);
        }
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ Products t·ª´ snapshot
    public List<Product> getProducts(ClientSession session) {
        return this.productCollection
                .find(session)
                .into(new ArrayList<>());
    }

    public List<Account> getAccounts(ClientSession session) {
        return this.accountCollection
                .find(session)
                .into(new ArrayList<>());
    }

    public List<Order> getOrders(ClientSession session, String productId) {
        return this.orderCollection
                .find(session, Filters.eq("productId", productId))
                .sort(Sorts.ascending("sequence"))
                .into(new ArrayList<>());
    }
    // L·∫•y EngineState hi·ªán t·∫°i (id lu√¥n = "default")
    public EngineState getEngineState(ClientSession session) {
        return engineStateCollection
                .find(session, Filters.eq("_id", "default"))
                .first();
    }
    // L∆∞u snapshot c·ªßa EngineState + Accounts + Orders + Products v√†o MongoDB
    public void save(EngineState engineState,
                     Collection<Account> accounts,
                     Collection<Order> orders,
                     Collection<Product> products) {
        log.info("saving snapshot: state={}, {} account(s), {} order(s), {} products",
                JSON.toJSONString(engineState), accounts.size(), orders.size(), products.size());

        // T·∫°o danh s√°ch c√°c l·ªánh ghi (WriteModel) cho t·ª´ng lo·∫°i d·ªØ li·ªáu
        List<WriteModel<Account>> accountWriteModels = buildAccountWriteModels(accounts);
        List<WriteModel<Product>> productWriteModels = buildProductWriteModels(products);
        List<WriteModel<Order>> orderWriteModels = buildOrderWriteModels(orders);
        try (ClientSession session = mongoClient.startSession()) {
            session.startTransaction();
            try {
                // L∆∞u EngineState: upsert (_id = "default")
                engineStateCollection.replaceOne(session, Filters.eq("_id", engineState.getId()), engineState,
                        new ReplaceOptions().upsert(true));
                // L∆∞u danh s√°ch Accounts (update ho·∫∑c insert n·∫øu ch∆∞a c√≥)
                if (!accountWriteModels.isEmpty()) {
                    accountCollection.bulkWrite(session, accountWriteModels, new BulkWriteOptions().ordered(false));
                }

                if (!productWriteModels.isEmpty()) {
                    productCollection.bulkWrite(session, productWriteModels, new BulkWriteOptions().ordered(false));
                }
                // L∆∞u danh s√°ch Orders
                // - OPEN order ‚Üí replace/upsert
                // - FILLED/CANCELLED order ‚Üí delete
                if (!orderWriteModels.isEmpty()) {
                    orderCollection.bulkWrite(session, orderWriteModels, new BulkWriteOptions().ordered(false));
                }

                session.commitTransaction();
            } catch (Exception e) {
                session.abortTransaction();
                throw new RuntimeException(e);
            }
        }
    }
    // C√°c h√†m n√†y ƒë·ªÅu t·∫°o ra List<WriteModel<T>>, WriteModel l√† m·ªôt ‚Äúl·ªánh‚Äù ghi v√†o MongoDB (insert, update, replace, delete).
    // code g·ªçi collection.bulkWrite(writeModels) ƒë·ªÉ ch·∫°y nhi·ªÅu thao t√°c c√πng l√∫c ‚Üí nhanh h∆°n g·ªçi t·ª´ng insert/update ri√™ng.
    private List<WriteModel<Product>> buildProductWriteModels(Collection<Product> products) {
        List<WriteModel<Product>> writeModels = new ArrayList<>();
        if (products.isEmpty()) {
            return writeModels;
        }
        for (Product item : products) {
            Bson filter = Filters.eq("_id", item.getId()); // V·ªõi m·ªói Product, t√¨m document c√≥ _id = item.getId().
            // üîπ 1. ReplaceOneModel<> T√¨m document ph√π h·ª£p v·ªõi filter, r·ªìi thay th·∫ø to√†n b·ªô document ƒë√≥ b·∫±ng item.",
            // ƒê√¢y l√† m·ªôt WriteModel trong MongoDB Java Driver.
            // Tham s·ªë item, ƒê√¢y l√† object Java (POJO) ƒë∆∞·ª£c map sang MongoDB document. MongoDB s·∫Ω l∆∞u document m·ªõi b·∫±ng to√†n b·ªô object n√†y.
            WriteModel<Product> writeModel = new ReplaceOneModel<>(filter, item, new ReplaceOptions().upsert(true));
            writeModels.add(writeModel);
        }
        return writeModels;
    }

    private List<WriteModel<Order>> buildOrderWriteModels(Collection<Order> orders) {
        List<WriteModel<Order>> writeModels = new ArrayList<>();
        if (orders.isEmpty()) {
            return writeModels;
        }
        for (Order item : orders) {
            Bson filter = Filters.eq("_id", item.getId());
            WriteModel<Order> writeModel;
            if (item.getStatus() == OrderStatus.OPEN) {
                // n·∫øu l·ªánh ƒëang m·ªü -> l∆∞u l·∫°i
                writeModel = new ReplaceOneModel<>(filter, item, new ReplaceOptions().upsert(true));
            } else {
                // n·∫øu l·ªánh ƒë√£ DONE/CANCEL -> x√≥a ƒëi kh·ªèi snapshot
                writeModel = new DeleteOneModel<>(filter);
            }
            writeModels.add(writeModel);
        }
        return writeModels;
    }

    private List<WriteModel<Account>> buildAccountWriteModels(Collection<Account> accounts) {
        List<WriteModel<Account>> writeModels = new ArrayList<>();
        if (accounts.isEmpty()) {
            return writeModels;
        }
        for (Account item : accounts) {
            Bson filter = Filters.eq("_id", item.getId());
            WriteModel<Account> writeModel = new ReplaceOneModel<>(filter, item, new ReplaceOptions().upsert(true));
            writeModels.add(writeModel);
        }
        return writeModels;
    }

}

